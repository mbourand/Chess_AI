#ifndef BITBOARD_H
#define BITBOARD_H

#include "globals.h"

constexpr uint8_t ALL = 0;
constexpr uint8_t PAWN = 1;
constexpr uint8_t KNIGHT = 2;
constexpr uint8_t BISHOP = 3;
constexpr uint8_t ROOK = 4;
constexpr uint8_t QUEEN = 5;
constexpr uint8_t KING = 6;

constexpr uint8_t WHITE = 0;
constexpr uint8_t BLACK = 1;

constexpr uint64_t ROW_1 = 0x00000000000000FF;
constexpr uint64_t ROW_2 = 0x000000000000FF00;
constexpr uint64_t ROW_3 = 0x0000000000FF0000;
constexpr uint64_t ROW_4 = 0x00000000FF000000;
constexpr uint64_t ROW_5 = 0x000000FF00000000;
constexpr uint64_t ROW_6 = 0x0000FF0000000000;
constexpr uint64_t ROW_7 = 0x00FF000000000000;
constexpr uint64_t ROW_8 = 0xFF00000000000000;

constexpr uint64_t FILE_A = 0x0101010101010101;
constexpr uint64_t FILE_B = 0x0202020202020202;
constexpr uint64_t FILE_C = 0x0404040404040404;
constexpr uint64_t FILE_D = 0x0808080808080808;
constexpr uint64_t FILE_E = 0x1010101010101010;
constexpr uint64_t FILE_F = 0x2020202020202020;
constexpr uint64_t FILE_G = 0x4040404040404040;
constexpr uint64_t FILE_H = 0x8080808080808080;

constexpr std::array<uint64_t, 8> ROWS = { ROW_1, ROW_2, ROW_3, ROW_4, ROW_5, ROW_6, ROW_7, ROW_8 };
constexpr std::array<uint64_t, 8> FILES = { FILE_A, FILE_B, FILE_C, FILE_D, FILE_E, FILE_F, FILE_G, FILE_H };

constexpr uint8_t WQ = 1;
constexpr uint8_t WK = 2;
constexpr uint8_t BQ = 4;
constexpr uint8_t BK = 8;

constexpr uint64_t WK_MASK = 0x6000000000000000;
constexpr uint64_t WQ_MASK = 0xe00000000000000;
constexpr uint64_t WQ_ATTACK_MASK = 0xc00000000000000;
constexpr uint64_t BK_MASK = 0x60;
constexpr uint64_t BQ_MASK = 0xe;
constexpr uint64_t BQ_ATTACK_MASK = 0xc;

constexpr std::array<uint64_t, 64> KNIGHT_MOVES =
{
    132096ULL, 329728ULL, 659712ULL, 1319424ULL, 2638848ULL, 5277696ULL, 10489856ULL, 4202496ULL,
    33816580ULL, 84410376ULL, 168886289ULL, 337772578ULL, 675545156ULL, 1351090312ULL, 2685403152ULL, 1075839008ULL,
    8657044482ULL, 21609056261ULL, 43234889994ULL, 86469779988ULL, 172939559976ULL, 345879119952ULL, 687463207072ULL, 275414786112ULL,
    2216203387392ULL, 5531918402816ULL, 11068131838464ULL, 22136263676928ULL, 44272527353856ULL, 88545054707712ULL, 175990581010432ULL, 70506185244672ULL,
    567348067172352ULL, 1416171111120896ULL, 2833441750646784ULL, 5666883501293568ULL, 11333767002587136ULL, 22667534005174272ULL, 45053588738670592ULL, 18049583422636032ULL,
    145241105196122112ULL, 362539804446949376ULL, 725361088165576704ULL, 1450722176331153408ULL, 2901444352662306816ULL, 5802888705324613632ULL, 11533718717099671552ULL, 4620693356194824192ULL,
    288234782788157440ULL, 576469569871282176ULL, 1224997833292120064ULL, 2449995666584240128ULL, 4899991333168480256ULL, 9799982666336960512ULL, 1152939783987658752ULL, 2305878468463689728ULL,
    1128098930098176ULL, 2257297371824128ULL, 4796069720358912ULL, 9592139440717824ULL, 19184278881435648ULL, 38368557762871296ULL, 4679521487814656ULL, 9077567998918656ULL
};

constexpr std::array<uint64_t, 64> KING_MOVES =
{
    770ULL, 1797ULL, 3594ULL, 7188ULL, 14376ULL, 28752ULL, 57504ULL, 49216ULL,
    197123ULL, 460039ULL, 920078ULL, 1840156ULL, 3680312ULL, 7360624ULL, 14721248ULL, 12599488ULL,
    50463488ULL, 117769984ULL, 235539968ULL, 471079936ULL, 942159872ULL, 1884319744ULL, 3768639488ULL, 3225468928ULL,
    12918652928ULL, 30149115904ULL, 60298231808ULL, 120596463616ULL, 241192927232ULL, 482385854464ULL, 964771708928ULL, 825720045568ULL,
    3307175149568ULL, 7718173671424ULL, 15436347342848ULL, 30872694685696ULL, 61745389371392ULL, 123490778742784ULL, 246981557485568ULL, 211384331665408ULL,
    846636838289408ULL, 1975852459884544ULL, 3951704919769088ULL, 7903409839538176ULL, 15806819679076352ULL, 31613639358152704ULL, 63227278716305408ULL, 54114388906344448ULL,
    216739030602088448ULL, 505818229730443264ULL, 1011636459460886528ULL, 2023272918921773056ULL, 4046545837843546112ULL, 8093091675687092224ULL, 16186183351374184448ULL, 13853283560024178688ULL,
    144959613005987840ULL, 362258295026614272ULL, 724516590053228544ULL, 1449033180106457088ULL, 2898066360212914176ULL, 5796132720425828352ULL, 11592265440851656704ULL, 4665729213955833856ULL
};

constexpr std::array<uint64_t, 64> ROOK_RELEVANT_MASKS =
{
    282578800148862ULL, 565157600297596ULL, 1130315200595066ULL, 2260630401190006ULL, 4521260802379886ULL, 9042521604759646ULL, 18085043209519166ULL, 36170086419038334ULL,
    282578800180736ULL, 565157600328704ULL, 1130315200625152ULL, 2260630401218048ULL, 4521260802403840ULL, 9042521604775424ULL, 18085043209518592ULL, 36170086419037696ULL,
    282578808340736ULL, 565157608292864ULL, 1130315208328192ULL, 2260630408398848ULL, 4521260808540160ULL, 9042521608822784ULL, 18085043209388032ULL, 36170086418907136ULL,
    282580897300736ULL, 565159647117824ULL, 1130317180306432ULL, 2260632246683648ULL, 4521262379438080ULL, 9042522644946944ULL, 18085043175964672ULL, 36170086385483776ULL,
    283115671060736ULL, 565681586307584ULL, 1130822006735872ULL, 2261102847592448ULL, 4521664529305600ULL, 9042787892731904ULL, 18085034619584512ULL, 36170077829103616ULL,
    420017753620736ULL, 699298018886144ULL, 1260057572672512ULL, 2381576680245248ULL, 4624614895390720ULL, 9110691325681664ULL, 18082844186263552ULL, 36167887395782656ULL,
    35466950888980736ULL, 34905104758997504ULL, 34344362452452352ULL, 33222877839362048ULL, 30979908613181440ULL, 26493970160820224ULL, 17522093256097792ULL, 35607136465616896ULL,
    9079539427579068672ULL, 8935706818303361536ULL, 8792156787827803136ULL, 8505056726876686336ULL, 7930856604974452736ULL, 6782456361169985536ULL, 4485655873561051136ULL, 9115426935197958144ULL
};

constexpr std::array<uint64_t, 64> BISHOP_RELEVANT_MASKS =
{
    18049651735527936ULL, 70506452091904ULL, 275415828992ULL, 1075975168ULL, 38021120ULL, 8657588224ULL, 2216338399232ULL, 567382630219776ULL, 
    9024825867763712ULL, 18049651735527424ULL, 70506452221952ULL, 275449643008ULL, 9733406720ULL, 2216342585344ULL, 567382630203392ULL, 1134765260406784ULL,
    4512412933816832ULL, 9024825867633664ULL, 18049651768822272ULL, 70515108615168ULL, 2491752130560ULL, 567383701868544ULL, 1134765256220672ULL, 2269530512441344ULL,
    2256206450263040ULL, 4512412900526080ULL, 9024834391117824ULL, 18051867805491712ULL, 637888545440768ULL, 1135039602493440ULL, 2269529440784384ULL, 4539058881568768ULL,
    1128098963916800ULL, 2256197927833600ULL, 4514594912477184ULL, 9592139778506752ULL, 19184279556981248ULL, 2339762086609920ULL, 4538784537380864ULL, 9077569074761728ULL, 
    562958610993152ULL, 1125917221986304ULL, 2814792987328512ULL, 5629586008178688ULL, 11259172008099840ULL, 22518341868716544ULL, 9007336962655232ULL, 18014673925310464ULL,
    2216338399232ULL, 4432676798464ULL, 11064376819712ULL, 22137335185408ULL, 44272556441600ULL, 87995357200384ULL, 35253226045952ULL, 70506452091904ULL,
    567382630219776ULL, 1134765260406784ULL, 2832480465846272ULL, 5667157807464448ULL, 11333774449049600ULL, 22526811443298304ULL, 9024825867763712ULL, 18049651735527936ULL,
};

constexpr std::array<uint64_t, 64> ROOK_MAGICS = {
    0x80004000976080ULL, 0x1040400010002000ULL, 0x4880200210000980ULL, 0x5280080010000482ULL, 0x200040200081020ULL, 0x2100080100020400ULL, 0x4280008001000200ULL,
    0x1000a4425820300ULL, 0x29002100800040ULL, 0x4503400040201004ULL, 0x209002001004018ULL, 0x1131000a10002100ULL, 0x9000800120500ULL, 0x10e001804820010ULL,
    0x29000402000100ULL, 0x2002000d01c40292ULL, 0x80084000200c40ULL, 0x10004040002002ULL, 0x201030020004014ULL, 0x80012000a420020ULL, 0x129010008001204ULL,
    0x6109010008040002ULL, 0x950010100020004ULL, 0x803a0000c50284ULL, 0x80004100210080ULL, 0x200240100140ULL, 0x20004040100800ULL, 0x4018090300201000ULL,
    0x4802010a00102004ULL, 0x2001000900040002ULL, 0x4a02104001002a8ULL, 0x2188108200204401ULL, 0x40400020800080ULL, 0x880402000401004ULL, 0x10040800202000ULL,
    0x604410a02001020ULL, 0x200200206a001410ULL, 0x86000400810080ULL, 0x428200040600080bULL, 0x2001000041000082ULL, 0x80002000484000ULL, 0x210002002c24000ULL,
    0x401a200100410014ULL, 0x5021000a30009ULL, 0x218000509010010ULL, 0x4000400410080120ULL, 0x20801040010ULL, 0x29040040820011ULL, 0x4080400024800280ULL,
    0x500200040100440ULL, 0x2880142001004100ULL, 0x412020400a001200ULL, 0x18c028004080080ULL, 0x884001020080401ULL, 0x210810420400ULL, 0x801048745040200ULL,
    0x4401002040120082ULL, 0x408200210012ULL, 0x110008200441ULL, 0x2010002004100901ULL, 0x801000800040211ULL, 0x480d000400820801ULL, 0x820104201280084ULL,
    0x1001040311802142ULL,
};

const std::array<uint64_t, 64> BISHOP_MAGICS = {
    0x1024b002420160ULL, 0x1008080140420021ULL, 0x2012080041080024ULL, 0xc282601408c0802ULL, 0x2004042000000002ULL, 0x12021004022080ULL, 0x880414820100000ULL, 0x4501002211044000ULL,
    0x20402222121600ULL, 0x1081088a28022020ULL, 0x1004c2810851064ULL, 0x2040080841004918ULL, 0x1448020210201017ULL, 0x4808110108400025ULL, 0x10504404054004ULL, 0x800010422092400ULL,
    0x40000870450250ULL, 0x402040408080518ULL, 0x1000980a404108ULL, 0x1020804110080ULL, 0x8200c02082005ULL, 0x40802009a0800ULL, 0x1000201012100ULL, 0x111080200820180ULL,
    0x904122104101024ULL, 0x4008200405244084ULL, 0x44040002182400ULL, 0x4804080004021002ULL, 0x6401004024004040ULL, 0x404010001300a20ULL, 0x428020200a20100ULL, 0x300460100420200ULL,
    0x404200c062000ULL, 0x22101400510141ULL, 0x104044400180031ULL, 0x2040040400280211ULL, 0x8020400401010ULL, 0x20100110401a0040ULL, 0x100101005a2080ULL, 0x1a008300042411ULL, 0x120a025004504000ULL,
    0x4001084242101000ULL, 0xa020202010a4200ULL, 0x4000002018000100ULL, 0x80104000044ULL, 0x1004009806004043ULL, 0x100401080a000112ULL, 0x1041012101000608ULL, 0x40400c250100140ULL,
    0x80a10460a100002ULL, 0x2210030401240002ULL, 0x6040aa108481b20ULL, 0x4009004050410002ULL, 0x8106003420200e0ULL, 0x1410500a08206000ULL, 0x92548802004000ULL, 0x1040041241028ULL, 0x120042025011ULL,
    0x8060104054400ULL, 0x20004404020a0a01ULL, 0x40008010020214ULL, 0x4000050209802c1ULL, 0x208244210400ULL, 0x10140848044010ULL,
};

const std::array<int, 64> ROOK_SHIFTS = {
    12, 11, 11, 11, 11, 11, 11, 12, 
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    12, 11, 11, 11, 11, 11, 11, 12
};

const std::array<int, 64> BISHOP_SHIFTS = {
    6, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 
    6, 5, 5, 5, 5, 5, 5, 6
};

class BitBoard
{
    public:
        // 4096 because the maximum amount of relevant squares for a rook is 12, so that makes 2^12 = 4096 possible keys
        std::vector<std::vector<uint64_t>> rook_moves;
        // 512 because the maximum amount of relevant squares for a bishop is 9, so that makes 2^9 = 512 possible keys
        std::vector<std::vector<uint64_t>> bishop_moves;
    
    protected:
        std::array<std::array<uint64_t, 7>, 2> m_bitboards;
        std::array<uint8_t, 64> m_pieces;
        uint8_t m_player_to_move;
        uint8_t m_castling_rights;
        uint8_t m_en_passant_square;

        bool m_check;

    public:
        BitBoard();
        BitBoard(const BitBoard& other);
        BitBoard(const std::string& pgn);
        BitBoard& operator=(const BitBoard& other);

        uint64_t pieceBoard(uint8_t color, uint8_t piece) const;
        uint64_t colorBoard(uint8_t color) const;
        uint64_t allPieces() const;
        uint64_t squareAttackers(uint8_t square, uint8_t attacker_color) const;
        uint64_t create_ray(uint8_t from, uint8_t to) const;

        std::list<uint16_t> get_moves(uint8_t color) const;
        uint64_t get_bishop_moves(uint8_t square, uint64_t blockers) const;
        uint64_t get_rook_moves(uint8_t square, uint64_t blockers) const;
        uint64_t get_pawn_moves(uint8_t square) const;
        uint8_t player_to_move() const;
        bool isSquareAttacked(uint8_t square, uint8_t attacker_color) const;
        uint64_t xrayRookAttacks(uint64_t blockers, uint8_t square) const;
        uint64_t xrayBishopAttacks(uint64_t blockers, uint8_t square) const;
        uint64_t get_attack_mask(uint8_t color) const;

        void generate_bishop_moves();
        void generate_rook_moves();

        bool occupied(uint8_t bit) const;
        uint8_t at(uint8_t bit) const;
        void setPiece(uint8_t color, uint8_t piece, uint8_t bit);
        uint64_t movePiece(int8_t from, int8_t to, uint8_t promotion_piece);
        void undoMove(uint64_t move);

        bool isCorrupted() const;

        friend std::ostream& operator<<(std::ostream& os, const BitBoard& board);
};

std::ostream& operator<<(std::ostream& os, const BitBoard& board);

void printBitboard(uint64_t bitboard);
void precomputed_knight_moves();
void precomputed_king_moves();
uint64_t generate_blockerboard_with_index(int index, uint64_t blockermask);
void rook_relevant_masks();
void bishop_relevant_masks();
uint8_t countBits(uint64_t n);


#endif
